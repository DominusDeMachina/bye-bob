# Task ID: 6
# Title: Employee Management CRUD Operations
# Status: pending
# Dependencies: 2, 3, 4, 5
# Priority: high
# Description: Implement complete CRUD operations for employee records with validation and error handling.
# Details:
1. Create employee model struct with all required fields
2. Implement repository layer for employee data access:
   ```go
   // employee_repository.go
   package repository

   import (
     "context"
     "github.com/jackc/pgx/v4/pgxpool"
     "your-project/internal/models"
   )

   type EmployeeRepository struct {
     db *pgxpool.Pool
   }

   func NewEmployeeRepository(db *pgxpool.Pool) *EmployeeRepository {
     return &EmployeeRepository{db: db}
   }

   func (r *EmployeeRepository) Create(ctx context.Context, employee *models.Employee) error {
     // Implementation
   }

   func (r *EmployeeRepository) GetByID(ctx context.Context, id int64) (*models.Employee, error) {
     // Implementation
   }

   func (r *EmployeeRepository) Update(ctx context.Context, employee *models.Employee) error {
     // Implementation
   }

   func (r *EmployeeRepository) Delete(ctx context.Context, id int64) error {
     // Implementation
   }

   func (r *EmployeeRepository) List(ctx context.Context, filter models.EmployeeFilter) ([]*models.Employee, error) {
     // Implementation with filtering, pagination
   }
   ```
3. Create service layer for business logic
4. Implement handlers for employee CRUD operations
5. Create Templ templates for employee forms and views
6. Implement form validation (both client and server side)
7. Add error handling and user feedback
8. Implement employee search with filtering
9. Create employee profile view with all details
10. Implement soft delete for employee records

# Test Strategy:
1. Unit test repository methods with test database
2. Test validation rules with valid and invalid data
3. Verify CRUD operations work end-to-end
4. Test search functionality with different filters
5. Validate error handling for edge cases
6. Test soft delete and record recovery
7. Verify proper authorization checks
